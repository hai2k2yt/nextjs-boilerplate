generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String?
  author    User?    @relation("UserPosts", fields: [authorId], references: [id], onDelete: SetNull)

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]    @relation("UserPosts")

  // React Flow room relations
  ownedFlowRooms      FlowRoom[]              @relation("FlowRoomOwner")
  flowRoomParticipant FlowRoomParticipant[]   @relation("FlowRoomParticipants")
  sentInvitations     FlowRoomInvitation[]    @relation("InvitationsSent")
  receivedInvitations FlowRoomInvitation[]    @relation("InvitationsReceived")
}

enum UserRole {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// React Flow Collaboration Models
model FlowRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation("FlowRoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Store the current flow data as JSON
  flowData    Json?    // Contains nodes, edges, and viewport

  // Collaboration settings
  isPublic    Boolean  @default(false)

  // Relations
  participants FlowRoomParticipant[]
  invitations  FlowRoomInvitation[]

  @@index([ownerId])
}

model FlowRoomParticipant {
  id       String   @id @default(cuid())
  roomId   String
  userId   String
  role     ParticipantRole @default(VIEWER)
  joinedAt DateTime @default(now())

  room     FlowRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation("FlowRoomParticipants", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

enum ParticipantRole {
  OWNER
  EDITOR
  VIEWER
}

// Room invitation system
model FlowRoomInvitation {
  id        String   @id @default(cuid())
  roomId    String
  inviterId String
  inviteeId String?  // Null if invitation is by email to non-user
  email     String?  // Email for invitations to non-users
  status    InvitationStatus @default(PENDING)
  role      ParticipantRole @default(VIEWER)
  message   String?  // Optional invitation message
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime? // Optional expiration date

  room     FlowRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  inviter  User     @relation("InvitationsSent", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee  User?    @relation("InvitationsReceived", fields: [inviteeId], references: [id], onDelete: Cascade)

  @@unique([roomId, inviteeId])
  @@unique([roomId, email])
  @@index([inviteeId])
  @@index([email])
  @@index([status])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

// Audit Log for persistent logging
model AuditLog {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  level         String   // ERROR, WARN, INFO, DEBUG
  category      String   // WEBSOCKET, REDIS, DATABASE, etc.
  message       String
  metadata      Json?    // Additional structured data
  correlationId String?  // For tracing related events
  userId        String?  // User associated with the event
  roomId        String?  // Room associated with the event
  duration      Float?   // Operation duration in milliseconds
  error         Json?    // Error details if applicable
  createdAt     DateTime @default(now())

  @@index([timestamp])
  @@index([level])
  @@index([category])
  @@index([userId])
  @@index([roomId])
  @@index([correlationId])
  @@index([timestamp, level])
  @@index([timestamp, category])
}
